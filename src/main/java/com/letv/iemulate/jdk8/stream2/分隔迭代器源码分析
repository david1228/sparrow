public interface Spliterator<T> {



#如果当前spliterator被分割，会被分割为两部分，包含元素的返回新的spliterator，另一部分不包含元素的可能是空。两者之间没有任何交集；
如果这个spliterator是一个ORDERED，返回的spliterator也应该是一个ORDERED的。
除非这个spliterator涵盖的是一个无线的元素，否则，涵盖元素是确定的，那么你重复调用trySplit，并最终会返回空，代表spliterator不能再进一步被分割了；
当返回结果不为空的话，那么在分割之前所报告的estimateSize()所返回的那个值，分割完之后必须大于或等于分割之后spliterator所返回的值；
并且如果这个spliterator是一个SUBSIZE，那么在分割之前这个spliterator的estimateSize等于分割之后的spliterator所返回的总和；

这个方法可能某些原因返回一些null：遍历已经开始之后无法再进行分割、数据结构限制、效率的考量；
API说明：
一种理想的trySplit是会不需要遍历的情况下，恰好将元素分割2份，中间分割（类似于二分查找），效率最高的，有助于并行执行计算；
如果元素差距非常多大，会导致并行效率有所影响；

Spliterator<T> trySplit();



#估算大小
返回元素估算值，在通过forEachRemaining遍历的时候；
元素数量本身无线，未知的，计算成本太高的，那么直接返回Integer.MAX_VALUE；
如果spliterator是SIZE，并且没有部分的被遍历和分隔，或者是SUBSIZE，没有被遍历，那么这个estimate是个元素精确值；否则，这种估算可能是不精确的，但是必须要减少随着trySplit调用而减少；

long estimateSize();



}
